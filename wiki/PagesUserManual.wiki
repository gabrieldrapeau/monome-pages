#summary The user manual for the pages application.

= Project Summary =

Pages was designed to allow multiple applications to run simultaneously on a single monome device.  One page (application) is in focus at any given time and will receive input from the monome and output led changes to the monome.  The focused page can be changed by holding down the page change button (the bottom right button on the monome) and pushing another button on the bottom row.

Pages doesn't make any sound on its own; it is intended to run alongside applications like Ableton Live and Max/MSP.  It is not limited to these two applications and should work with any applications capable of sending/receiving MIDI and/or OSC.  Think of it as a somewhat general purpose MIDI/OSC router for interfacing monome(s) with other audio applications.

There are currently 7 pages available, and any number of monomes can be configured with any combination of these 7 pages.  The pages adapt to the size of the monome you are using.  Each page supports 8x8 (40h/64), 16x8 (128), and 16x16 (256) sized monomes and will automatically adapt based on your configuration.

= Summary of Available Pages =

  * MIDI Sequencer

The MIDI Sequencer page turns a monome into a MIDI clock-driven step sequencer that sends MIDI note on/off messages.  It has approximately 240 banks of 32x15 steps each (that's 32 steps wide, 15 instruments deep).  Basic features such as copy and clear pattern/bank have been implemented, as well as a simple pattern generator and pattern alteration algorithm.

See: [http://code.google.com/p/monome-pages/wiki/MIDISequencerPage MIDISequencerPage]

  * MIDI Keyboard

The MIDI Keyboard is a basic keyboard interface that sends a MIDI note on message when a button is pressed and a MIDI note off message when a button is released.  The buttons are automatically mapped to musical keys/scales.  Up to 6 instruments can be controlled from a single instance of the MIDI Keyboard by sending MIDI note messages on different MIDI channels.  The key and scale can be selected on the monome.  Currently 4 scales are implemented with 12 keys, for a total of 48 possible key/scale combinations.

See: [http://code.google.com/p/monome-pages/wiki/MIDIKeyboardPage MIDIKeyboardPage]

  * MIDI Faders

The MIDI Faders page turns the monome into a set of virtual faders where each column represents the MIDI CC value of one parameter.  There is a variable delay that controls how fast the faders move from value to value.

See: [http://code.google.com/p/monome-pages/wiki/MIDIFadersPage MIDIFadersPage]

  * MIDI Triggers

The MIDI Triggers page is a simple grid of MIDI trigger buttons.  The buttons send MIDI notes when pressed.  The buttons are organized in either columns or rows, and each column/row sends on it's own MIDI channel.  Each row or column can be configured to act as toggle buttons instead of triggers.  In toggle mode, a row or column's buttons will switch from on to off whenever they are pressed.  In trigger mode, a row or column's buttons will stay lit while the buttons are held down.

See: [http://code.google.com/p/monome-pages/wiki/MIDITriggersPage MIDITriggersPage]

  * External Application

The External Application page is used to route an external application (ie. mlr, bboingg, flin, dj64, etc.) through a page.  This allows you to run multiple applications simultaneously on a single monome device and switch between them.  For example, you could run mlr on page 1, boiingg on page 2, etc.  You could also run quadrants or hub configured with a few applications of their own through a page.

See: ExternalApplicationPage

  * Ableton Clip Launcher

The Ableton Clip Launcher page is an interface to launch clips, stop tracks, or record enable/disable tracks in Ableton Live.  It is currently implemented to use the LiveOSC project to communicate with Ableton Live (so you'll need LiveOSC installed and configured for this to work).  It polls the state of Ableton Live and updates the page according to the state of the clips, so it is always in sync with the state of Ableton Live.

See: AbletonClipLauncherPage

  * Ableton Clip Control (another version of Ableton Clip Launcher)

The Ableton Clip Control page is an interface to launch clips, follow midi notes played in all tracks, and stop tracks in Ableton Live.  It is currently implemented to use the LiveOSC project to communicate with Ableton Live (so you'll need LiveOSC installed and configured for this to work).  It polls the state of Ableton Live and updates the page according to the state of the clips, so it is always in sync with the state of Ableton Live. It gives a precious feedback about midi notes played for each tracks in order to match what sound is made by what track. It is precious at least for Julien Bayle (!)

See: AbletonClipControlPage


  * Ableton Clip Skipper

The Ableton Clip Skipper page is kind of like mlr for Ableton Live.  It allows you to skip around in the currently playing audio or MIDI clips of the first 8 or 16 Ableton Live tracks.  The grid adapts to the currently playing clip's loop length automatically so any size clips will work and no configuration of the row/clip is necessary.

See: AbletonClipSkipperPage

  * Machine Drum Interface

The Machine Drum Interface page is a set of controls for controlling an Elektron Machine Drum (any version should work). It has 4 kit save slots, 4 kit load slots, it can initialize a new kit with random machines in each slot, and it sends random parameter changes to machines and global effects. Useful as a live performance tool or in the studio for crafting kits w/ randomness. This can generate some bizarre, other-worldly drum sounds. Other MIDI pages (like the sequencer) can be routed out to the Machine Drum as well (just select the appropriate MIDI output device in the page).

See: MachineDrumInterfacePage

= Setup Guide =

== Downloading Pages ==

The latest version of pages can be downloaded from the Downloads page of this project:

http://code.google.com/p/monome-pages/downloads/list

It has been compiled to run with Java version 1.5 or higher, so you may need to upgrade your version of Java to run the application.  You can run "java -version" from a command line to see what version of Java you currently have installed.

== Virtual MIDI Devices ==

You will need to install/enable a set of virtual MIDI devices if you wish to route pages MIDI applications to an audio application (ie. Ableton Live).  Most users will want to do this.

=== Windows Virtual MIDI Devices Setup ===

[http://www.midiox.com/myoke.htm MIDI Yoke] or [http://members.nextra.at/hubwin/midi.html Hubi's MIDI Loopback Device] should both work fine for Windows users.  Follow the instructions on the web sites to install.

=== OS X Virtual MIDI Devices Setup ===

The IAC driver comes standard with OS X and will work fine for OS X users.  A tutorial on enabling this driver can be found here: http://fox-gieg.com/tutorials/2007/inter-application-midi/

OS X users will also need to install the mmj.jar file and associated files found here: http://www.humatic.de/htools/mmj.htm

== Monome Serial Setup ==

Monome Serial should be configured so that each monome device has a unique prefix.  The standard OSC ports will work, but using non-standard ports will make the external page configuration easier.  For example, ports 7000 and 7070 can be used to free up 8000 and 8080 for an external application (ie. mlr).

== Ableton Live Setup ==

The Ableton Live setup described below can be adapted to other audio software if desired.  The same types of setup should be applied in the application you want to use.  Specifically, we want Ableton Live (or the chosen audio application) to:

  # Send out MIDI Clock on exactly one virtual MIDI device
  # Receive MIDI Track and MIDI Remote messages from as many of the other virtual MIDI devices that you need

  * Setting up MIDI Clock Sync

  # Launch Ableton Live
  # Go to Options -> Preferences -> MIDI / Sync tab.
  # Verify that you can see your virtual MIDI devices, if you don't see them listed then double check your virtual MIDI device settings.
  # Choose one device for MIDI Clock Sync.  I generally use the first device (ie. MIDI Yoke 1, IAC Device 1, etc).
  # You will see two entries listed for the device, one labeled "Input:" and one labeled "Output:".  Notice that each device has 3 buttons, "Track", "Sync", and "Remote".
  # For the Input: device, make sure all 3 buttons are turned off.
  # For the Output: device, make sure just the Sync button is turned on.
  # On the Audio tab of the preferences pane you will see an "Overall Latency" value.  Make note of this value.
  # On the MIDI / Sync tab of the preferences pane click on the small gray arrow to the left of the Output: <virtual device> entry--the one that has Sync enabled.  This should expand the entry and give you a few configuration options.
  # Set the MIDI Clock Sync Delay value to be -negative- the "Overall Latency" value from the Audio page, or as close as you can get to it.  For example, if your Overall Latency is 24.7ms, you should set the MIDI Clock Sync Delay to -25ms.

  * Setting up MIDI Track and Remote

  # In the Preferences / MIDI tab, locate the devices you want Ableton to receive MIDI note and control change messages on.
  # Notice that there are two entries for each device, Input and Output.  Make sure that all 3 buttons are disabled on all Output entries for the devices you want to receive MIDI notes and control change messages on.
  # Enable Track and Remote on the Input entries of the devices you wish to use.  You can enable both Track and Remote for a device if you want both types of messages to go through it, or just one or the other.

Here is an example of how the MIDI Sync page should be setup:

[http://www.post-digital.net/~phortran/pages_ableton_midi.jpg]

== LiveOSC Setup ==

=== Windows ===

1) Download and install Python 2.2.3 to {{{C:\Python22}}}.  Be sure to install it to this directory.

http://www.python.org/download/releases/2.2.3/

2) Download the LiveAPI package from http://code.google.com/p/liveapi.  Extract it to a temporary folder.

3) Copy the {{{_LiveAPICore}}} folder from the LiveAPI package to {{{C:\Python22\Lib}}}

4) Create a file called {{{__init__.py}}} in the {{{C:\Python22\Lib\_LiveAPICore}}} that contains exactly this one line:

{{{__all__ = ["LiveUtils", "OSC", "RemixNet"]}}}

5) Copy the {{{LiveOSC}}} and {{{LiveTelnet}}} folders both to {{{C:\Program Files\Ableton\...\Resources\MIDI Remote Scripts}}}

6) Download the LiveOSC.zip package from the Downloads tab and copy the folder to {{{C:\Program Files\Ableton\...\Resources\MIDI Remote Scripts}}}

7) Load up Ableton Live, go to Options -> Preferences -> MIDI and select LiveOSC as a control surface. 

8) Create an Ableton Clip Launcher page and create some clips in Ableton to see if they show up on the monome.  You shouldn't need to change the Ableton OSC/MIDI settings in pages because it defaults to OSC.

=== OSX ===
1) Download and unzip the PagesMIDI.zip file from the Downloads tab

2) Put the PagesMIDI folder inside Live.app (right-click, "Show Package Contents") Live.app/Contents/App-Resources/MIDI Remote Scripts

3) Start Ableton Live, go to Options -> Preferences, go to the MIDI/Sync tab and select PagesMIDI from the first Control Surface dropdown

4) Make sure you have at least 2 IAC devices enabled

5) In the Input / Output dropdowns select two unique devices (ie. IAC Driver 1 for Input and IAC Driver 2 for Output).  Be sure to disable 'Track' and 'Remote' for the input device or you might have trouble mapping midi controls.

6) In pages, enable the MIDI Input and Output devices you selected in Ableton.  Important: you need to make the opposite selection as you made in Ableton.  If you picked IAC Driver 1 for Input in Ableton, pick it for Output in pages.  Same for the other device.

7) In pages, choose the Ableton OSC/MIDI Settings option from the Configuration menu and choose the MIDI option.  Verify the ports and click Save.

8) The Ableton / Pages integration is now configured.  You can save this configuration and load it back at any time without going through these steps again.

Note: You can use the same MIDI output port for MIDI clock sync as well.  Just enable Sync in Ableton on the appropriate MIDI output device from the MIDI preferences page (it should be labeled PagesMIDI).

== Pages Setup ==

Now that Monome Serial and Ableton Live are running it's time to run the pages application.  If you haven't already, download a copy of it from the Downloads tab and do any necessary Java setup as described in the sections above.

You can launch pages either by double-clicking on the JAR file or running "java -jar pages-0.1.7.jar" from the command line.

You will be greeted by an empty window and a File menu.  The first step is to create a new configuration.  Go to File -> New Configuration and give it a name.

You will see two new menus appear: Configuration and MIDI.  First, go to the Configuration menu and choose OSC Settings.  Enter OSC settings appropriate with your Monome Serial configuration.  The default settings should work if you haven't modified your ports, otherwise update the ports accordingly and click on Save.

Next, go to the Configuration menu again and choose New Monome Configuration.  You will be asked for the size X, size Y, and prefix for the monome.  Enter appropriate values for the monome you are configuring.  A 64 or 40h should be set for size X = 8 and size Y = 8 with the prefix /40h or /64 by default (check Monome Serial to see what your prefix is).  A 128 should be set for size X = 16, size Y = 8, prefix = /128 (by default), and a 256 should be set for size X = 16 and size Y = 16, prefix = /256 (by default).  You can repeat this step to configure multiple monome devices.  A sub-window with a Page menu will be created for each monome device you configure in this way.

Next, go to the MIDI menu.  In the MIDI In sub-menu, select the MIDI device you will be receiving MIDI clock from.  In the MIDI Out sub-menu, select the MIDI devices you will want to send MIDI to.

Finally, go to the monome sub-window and click on the Page menu.  Select the 'New Page' option and select the type of page to create.  Repeat this process for a few page types; you will see a configuration panel for each page you create in this way.  You can switch pages on the page menu or by holding down the bottom-right button on the monome and pushing another button on the bottom row.  The bottom-left button corresponds to page 1, the button to the right of it corresponds to page 2, etc.

To test the MIDI clock sync, create a MIDI sequencer page.  It is currently the only page that receives MIDI clock sync.  When you press play in Ableton Live, you should see a vertical column move across the monome.  If you are not seeing the vertical bar, double check your MIDI settings in Ableton and in pages, and make sure that if you're on OS X you have installed the mmj.jar library correctly.  You may even try rebooting your computer if you're still having trouble.

MIDI-related pages have an 'Add MIDI Output' button, you should click on this and select a MIDI device for the page to output on or it won't do much.  Make sure that Ableton Live is configured to receive MIDI on the device you select.

You can save and load configurations from the File menu.  Configurations are stored in XML format.

See the individual page wiki pages for button layout and functionality.

== Patterns ==

Each page has 8 or 16 patterns, depending on the size of the monome.  Patterns can be accessed by holding down the page change button (the bottom right button).  The top row of buttons each represent one pattern.  When you hold down the page change button and press a pattern button you will trigger that pattern to play/record.  The currently playing pattern is always recording all button presses even after it begins looping, and it will flash when the page change button is held down.  Pushing another pattern button will switch the pattern that is running.  If you press the currently running pattern button it will clear and disable the pattern, allowing you to record over it again.

By default, pattern recording is quantized to 1/16th notes.  You can change the quantization setting for each page's patterns in the Page menu.  You can also set the length of each page's patterns to a number of bars between 1 and 16.  By default, patterns are 4 bars long.  The pattern configuration will be saved with your configuration files, but the recorded patterns will not.

Patterns run off of MIDI clock signal so you must have a MIDI input selected and that MIDI input must be receiving MIDI clock from Ableton or another source.